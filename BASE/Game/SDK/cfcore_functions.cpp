#pragma once
#include "pch.h"

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: cfcore

#include "Basic.hpp"

#include "cfcore_classes.hpp"
#include "cfcore_parameters.hpp"


namespace SDK
{

// Function cfcore.CFCoreBPLibrary.BreakFileSize
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int64                                   Bytes                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FCFCoreFileSize                  ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FCFCoreFileSize UCFCoreBPLibrary::BreakFileSize(int64 Bytes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CFCoreBPLibrary", "BreakFileSize");

	Params::CFCoreBPLibrary_BreakFileSize Parms{};

	Parms.Bytes = Bytes;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function cfcore.CFCoreBPLibrary.ExtractIdFromExtraData
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    InExtraData                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    InFieldName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 UCFCoreBPLibrary::ExtractIdFromExtraData(const class FString& InExtraData, const class FString& InFieldName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CFCoreBPLibrary", "ExtractIdFromExtraData");

	Params::CFCoreBPLibrary_ExtractIdFromExtraData Parms{};

	Parms.InExtraData = FreeCRT::TypeTraits::Move(InExtraData);
	Parms.InFieldName = FreeCRT::TypeTraits::Move(InFieldName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function cfcore.CFCoreBPLibrary.FormatFileSize
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int64                                   Bytes                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UCFCoreBPLibrary::FormatFileSize(int64 Bytes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CFCoreBPLibrary", "FormatFileSize");

	Params::CFCoreBPLibrary_FormatFileSize Parms{};

	Parms.Bytes = Bytes;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function cfcore.CFCoreBPLibrary.MakeApiRequestPagination
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   page_size                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FCFCoreApiRequestPagination      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FCFCoreApiRequestPagination UCFCoreBPLibrary::MakeApiRequestPagination(int32 Index_0, int32 page_size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CFCoreBPLibrary", "MakeApiRequestPagination");

	Params::CFCoreBPLibrary_MakeApiRequestPagination Parms{};

	Parms.Index_0 = Index_0;
	Parms.page_size = page_size;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function cfcore.CFCoreBPLibrary.MakeAssureServerModsUpdatedParams
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const TArray<int64>&                    modIds                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<int64>&                    devModIds                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FAssureServerModsUpdatedParams   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FAssureServerModsUpdatedParams UCFCoreBPLibrary::MakeAssureServerModsUpdatedParams(const TArray<int64>& modIds, const TArray<int64>& devModIds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CFCoreBPLibrary", "MakeAssureServerModsUpdatedParams");

	Params::CFCoreBPLibrary_MakeAssureServerModsUpdatedParams Parms{};

	Parms.modIds = FreeCRT::TypeTraits::Move(modIds);
	Parms.devModIds = FreeCRT::TypeTraits::Move(devModIds);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function cfcore.CFCoreBPLibrary.MakeCreateModFileRequest
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// ECFCoreChangelogMarkupType              changelog_type                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    changelog                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    DisplayName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<int64>&                    gameVersionIds                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// ECFCoreFileReleaseType                  releaseType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FModFileCookingOptions&    cookingOptions                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FCreateModFileRequest            ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FCreateModFileRequest UCFCoreBPLibrary::MakeCreateModFileRequest(ECFCoreChangelogMarkupType changelog_type, const class FString& changelog, const class FString& Filename, const class FString& DisplayName, const TArray<int64>& gameVersionIds, ECFCoreFileReleaseType releaseType, const struct FModFileCookingOptions& cookingOptions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CFCoreBPLibrary", "MakeCreateModFileRequest");

	Params::CFCoreBPLibrary_MakeCreateModFileRequest Parms{};

	Parms.changelog_type = changelog_type;
	Parms.changelog = FreeCRT::TypeTraits::Move(changelog);
	Parms.Filename = FreeCRT::TypeTraits::Move(Filename);
	Parms.DisplayName = FreeCRT::TypeTraits::Move(DisplayName);
	Parms.gameVersionIds = FreeCRT::TypeTraits::Move(gameVersionIds);
	Parms.releaseType = releaseType;
	Parms.cookingOptions = FreeCRT::TypeTraits::Move(cookingOptions);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function cfcore.CFCoreBPLibrary.MakeCreateModRequest
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// int64                                   class_id                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    summary                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECFCoreMakrupType                       description_type                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Description                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   primary_category_id                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<int64>&                    game_category_ids                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    is_experimental                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FCreateModRequest                ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FCreateModRequest UCFCoreBPLibrary::MakeCreateModRequest(int64 class_id, const class FString& Name_0, const class FString& summary, ECFCoreMakrupType description_type, const class FString& Description, int64 primary_category_id, const TArray<int64>& game_category_ids, bool is_experimental)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CFCoreBPLibrary", "MakeCreateModRequest");

	Params::CFCoreBPLibrary_MakeCreateModRequest Parms{};

	Parms.class_id = class_id;
	Parms.Name_0 = FreeCRT::TypeTraits::Move(Name_0);
	Parms.summary = FreeCRT::TypeTraits::Move(summary);
	Parms.description_type = description_type;
	Parms.Description = FreeCRT::TypeTraits::Move(Description);
	Parms.primary_category_id = primary_category_id;
	Parms.game_category_ids = FreeCRT::TypeTraits::Move(game_category_ids);
	Parms.is_experimental = is_experimental;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function cfcore.CFCoreBPLibrary.MakeExternalAuthAdditionalInfo
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FDateTime&                 eulaAcceptTime                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FExternalAuthAdditionalInfo      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FExternalAuthAdditionalInfo UCFCoreBPLibrary::MakeExternalAuthAdditionalInfo(const struct FDateTime& eulaAcceptTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CFCoreBPLibrary", "MakeExternalAuthAdditionalInfo");

	Params::CFCoreBPLibrary_MakeExternalAuthAdditionalInfo Parms{};

	Parms.eulaAcceptTime = FreeCRT::TypeTraits::Move(eulaAcceptTime);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function cfcore.CFCoreBPLibrary.MakeGetCategoriesFilter
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   class_id                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FCFCoreGetCategoriesFilter       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FCFCoreGetCategoriesFilter UCFCoreBPLibrary::MakeGetCategoriesFilter(int32 class_id)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CFCoreBPLibrary", "MakeGetCategoriesFilter");

	Params::CFCoreBPLibrary_MakeGetCategoriesFilter Parms{};

	Parms.class_id = class_id;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function cfcore.CFCoreBPLibrary.MakeSettings
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    default_language                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   game_id                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    api_key                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    mods_directory                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    user_data_directory                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   max_concurrent_installations                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FCFCoreSettings                  ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FCFCoreSettings UCFCoreBPLibrary::MakeSettings(const class FString& default_language, int64 game_id, const class FString& api_key, const class FString& mods_directory, const class FString& user_data_directory, int32 max_concurrent_installations)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CFCoreBPLibrary", "MakeSettings");

	Params::CFCoreBPLibrary_MakeSettings Parms{};

	Parms.default_language = FreeCRT::TypeTraits::Move(default_language);
	Parms.game_id = game_id;
	Parms.api_key = FreeCRT::TypeTraits::Move(api_key);
	Parms.mods_directory = FreeCRT::TypeTraits::Move(mods_directory);
	Parms.user_data_directory = FreeCRT::TypeTraits::Move(user_data_directory);
	Parms.max_concurrent_installations = max_concurrent_installations;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function cfcore.CFCoreBPLibrary.MakeSettingsFromProjectConfig
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FCFCoreSettings                  ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FCFCoreSettings UCFCoreBPLibrary::MakeSettingsFromProjectConfig()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CFCoreBPLibrary", "MakeSettingsFromProjectConfig");

	Params::CFCoreBPLibrary_MakeSettingsFromProjectConfig Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function cfcore.CFCoreBPLibrary.MakeUpdateModRequest
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// int64                                   class_id                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    summary                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECFCoreMakrupType                       description_type                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Description                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   primary_category_id                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<int64>&                    game_category_ids                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    is_experimental                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FUpdateModRequest                ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FUpdateModRequest UCFCoreBPLibrary::MakeUpdateModRequest(int64 class_id, const class FString& Name_0, const class FString& summary, ECFCoreMakrupType description_type, const class FString& Description, int64 primary_category_id, const TArray<int64>& game_category_ids, bool is_experimental)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CFCoreBPLibrary", "MakeUpdateModRequest");

	Params::CFCoreBPLibrary_MakeUpdateModRequest Parms{};

	Parms.class_id = class_id;
	Parms.Name_0 = FreeCRT::TypeTraits::Move(Name_0);
	Parms.summary = FreeCRT::TypeTraits::Move(summary);
	Parms.description_type = description_type;
	Parms.Description = FreeCRT::TypeTraits::Move(Description);
	Parms.primary_category_id = primary_category_id;
	Parms.game_category_ids = FreeCRT::TypeTraits::Move(game_category_ids);
	Parms.is_experimental = is_experimental;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function cfcore.CFCoreSubsystem.AnalyticsSendGamePlaySession
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGamePlaySessionParams&    InParams                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FCFCoreError& Error)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::AnalyticsSendGamePlaySession(const struct FGamePlaySessionParams& InParams, const TDelegate<void()>& OnSuccess, const TDelegate<void(const struct FCFCoreError& Error)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "AnalyticsSendGamePlaySession");

	Params::CFCoreSubsystem_AnalyticsSendGamePlaySession Parms{};

	Parms.InParams = FreeCRT::TypeTraits::Move(InParams);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.AnalyticsSendModBrowsingFunnelAction
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FModBrowsingFunnelParams&  InParams                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FCFCoreError& Error)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::AnalyticsSendModBrowsingFunnelAction(const struct FModBrowsingFunnelParams& InParams, const TDelegate<void()>& OnSuccess, const TDelegate<void(const struct FCFCoreError& Error)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "AnalyticsSendModBrowsingFunnelAction");

	Params::CFCoreSubsystem_AnalyticsSendModBrowsingFunnelAction Parms{};

	Parms.InParams = FreeCRT::TypeTraits::Move(InParams);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.AnalyticsSendModBrowsingFunnelImpression
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FModBrowsingFunnelParams&  InParams                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FCFCoreError& Error)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::AnalyticsSendModBrowsingFunnelImpression(const struct FModBrowsingFunnelParams& InParams, const TDelegate<void()>& OnSuccess, const TDelegate<void(const struct FCFCoreError& Error)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "AnalyticsSendModBrowsingFunnelImpression");

	Params::CFCoreSubsystem_AnalyticsSendModBrowsingFunnelImpression Parms{};

	Parms.InParams = FreeCRT::TypeTraits::Move(InParams);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.ApiEntitlementsRedeemCode
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FEntitlementsRedeemCodeRequest&InRequest                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FEntitlementCampaign& EntitlementCampaign)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FCFCoreError& Error)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::ApiEntitlementsRedeemCode(const struct FEntitlementsRedeemCodeRequest& InRequest, const TDelegate<void(const struct FEntitlementCampaign& EntitlementCampaign)>& OnSuccess, const TDelegate<void(const struct FCFCoreError& Error)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "ApiEntitlementsRedeemCode");

	Params::CFCoreSubsystem_ApiEntitlementsRedeemCode Parms{};

	Parms.InRequest = FreeCRT::TypeTraits::Move(InRequest);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.ApiFinalizePurchase
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FFinalizePurchaseRequest&  Request                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FCFCoreError& Error)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::ApiFinalizePurchase(const struct FFinalizePurchaseRequest& Request, const TDelegate<void()>& OnSuccess, const TDelegate<void(const struct FCFCoreError& Error)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "ApiFinalizePurchase");

	Params::CFCoreSubsystem_ApiFinalizePurchase Parms{};

	Parms.Request = FreeCRT::TypeTraits::Move(Request);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.ApiGeneratePremiumCheckoutUrl
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGenPremiumCheckoutUrlRequest&Request                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const class FString& URL)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FCFCoreError& Error)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::ApiGeneratePremiumCheckoutUrl(const struct FGenPremiumCheckoutUrlRequest& Request, const TDelegate<void(const class FString& URL)>& OnSuccess, const TDelegate<void(const struct FCFCoreError& Error)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "ApiGeneratePremiumCheckoutUrl");

	Params::CFCoreSubsystem_ApiGeneratePremiumCheckoutUrl Parms{};

	Parms.Request = FreeCRT::TypeTraits::Move(Request);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.ApiGenerateTempToken
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TDelegate<void(const class FString& temp_user_token)>on_result                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FCFCoreError& Error)>&on_error                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::ApiGenerateTempToken(TDelegate<void(const class FString& temp_user_token)> on_result, const TDelegate<void(const struct FCFCoreError& Error)>& on_error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "ApiGenerateTempToken");

	Params::CFCoreSubsystem_ApiGenerateTempToken Parms{};

	Parms.on_result = on_result;
	Parms.on_error = on_error;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.ApiGetActiveCookingVersion
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(const int32& Version)>&OnVersion                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FCFCoreError& Error)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::ApiGetActiveCookingVersion(const TDelegate<void(const int32& Version)>& OnVersion, const TDelegate<void(const struct FCFCoreError& Error)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "ApiGetActiveCookingVersion");

	Params::CFCoreSubsystem_ApiGetActiveCookingVersion Parms{};

	Parms.OnVersion = OnVersion;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.ApiGetBlockedModsDetails
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FBlockedDetails& blocked_details)>on_result                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FCFCoreError& Error)>&on_error                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::ApiGetBlockedModsDetails(TDelegate<void(const struct FBlockedDetails& blocked_details)> on_result, const TDelegate<void(const struct FCFCoreError& Error)>& on_error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "ApiGetBlockedModsDetails");

	Params::CFCoreSubsystem_ApiGetBlockedModsDetails Parms{};

	Parms.on_result = on_result;
	Parms.on_error = on_error;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.ApiGetCategories
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FCFCoreGetCategoriesFilter&Filter                                                 (Parm, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(const TArray<struct FCategory>& Categories)>on_results                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FCFCoreError& Error)>&on_error                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::ApiGetCategories(const struct FCFCoreGetCategoriesFilter& Filter, TDelegate<void(const TArray<struct FCategory>& Categories)> on_results, const TDelegate<void(const struct FCFCoreError& Error)>& on_error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "ApiGetCategories");

	Params::CFCoreSubsystem_ApiGetCategories Parms{};

	Parms.Filter = FreeCRT::TypeTraits::Move(Filter);
	Parms.on_results = on_results;
	Parms.on_error = on_error;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.ApiGetFiles
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<int64>&                    fileIds                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const TArray<struct FFile>& files)>OnResults                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FCFCoreError& Error)>OnError                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::ApiGetFiles(const TArray<int64>& fileIds, TDelegate<void(const TArray<struct FFile>& files)> OnResults, TDelegate<void(const struct FCFCoreError& Error)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "ApiGetFiles");

	Params::CFCoreSubsystem_ApiGetFiles Parms{};

	Parms.fileIds = FreeCRT::TypeTraits::Move(fileIds);
	Parms.OnResults = OnResults;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.ApiGetGame
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FGame& Game)>on_game                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FCFCoreError& Error)>&on_error                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::ApiGetGame(TDelegate<void(const struct FGame& Game)> on_game, const TDelegate<void(const struct FCFCoreError& Error)>& on_error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "ApiGetGame");

	Params::CFCoreSubsystem_ApiGetGame Parms{};

	Parms.on_game = on_game;
	Parms.on_error = on_error;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.ApiGetMe
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FMe& Me)>   on_results                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FCFCoreError& Error)>&on_error                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::ApiGetMe(TDelegate<void(const struct FMe& Me)> on_results, const TDelegate<void(const struct FCFCoreError& Error)>& on_error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "ApiGetMe");

	Params::CFCoreSubsystem_ApiGetMe Parms{};

	Parms.on_results = on_results;
	Parms.on_error = on_error;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.ApiGetMod
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int64                                   modId                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FCFCoreMod& mod)>on_mod                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FCFCoreError& Error)>&on_error                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::ApiGetMod(int64 modId, TDelegate<void(const struct FCFCoreMod& mod)> on_mod, const TDelegate<void(const struct FCFCoreError& Error)>& on_error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "ApiGetMod");

	Params::CFCoreSubsystem_ApiGetMod Parms{};

	Parms.modId = modId;
	Parms.on_mod = on_mod;
	Parms.on_error = on_error;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.ApiGetModDescription
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int64                                   modId                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const class FString& Description)>on_mod_desc                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FCFCoreError& Error)>&on_error                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::ApiGetModDescription(int64 modId, TDelegate<void(const class FString& Description)> on_mod_desc, const TDelegate<void(const struct FCFCoreError& Error)>& on_error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "ApiGetModDescription");

	Params::CFCoreSubsystem_ApiGetModDescription Parms{};

	Parms.modId = modId;
	Parms.on_mod_desc = on_mod_desc;
	Parms.on_error = on_error;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.ApiGetMods
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<int64>&                    modIds                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const TArray<struct FCFCoreMod>& mods)>on_results                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FCFCoreError& Error)>&on_error                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::ApiGetMods(const TArray<int64>& modIds, TDelegate<void(const TArray<struct FCFCoreMod>& mods)> on_results, const TDelegate<void(const struct FCFCoreError& Error)>& on_error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "ApiGetMods");

	Params::CFCoreSubsystem_ApiGetMods Parms{};

	Parms.modIds = FreeCRT::TypeTraits::Move(modIds);
	Parms.on_results = on_results;
	Parms.on_error = on_error;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.ApiGetModsHighlights
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FCFCoreGetModsHighlightsFilter&InFilter                                               (Parm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FModsHighlights& mods)>OnResults                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FCFCoreError& Error)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::ApiGetModsHighlights(const struct FCFCoreGetModsHighlightsFilter& InFilter, TDelegate<void(const struct FModsHighlights& mods)> OnResults, const TDelegate<void(const struct FCFCoreError& Error)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "ApiGetModsHighlights");

	Params::CFCoreSubsystem_ApiGetModsHighlights Parms{};

	Parms.InFilter = FreeCRT::TypeTraits::Move(InFilter);
	Parms.OnResults = OnResults;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.ApiGetModsHighlightsV2
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FCFCoreGetModsHighlightsFilter&InFilter                                               (Parm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FModsHighlightsV2& mods)>OnResults                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FCFCoreError& Error)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::ApiGetModsHighlightsV2(const struct FCFCoreGetModsHighlightsFilter& InFilter, TDelegate<void(const struct FModsHighlightsV2& mods)> OnResults, const TDelegate<void(const struct FCFCoreError& Error)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "ApiGetModsHighlightsV2");

	Params::CFCoreSubsystem_ApiGetModsHighlightsV2 Parms{};

	Parms.InFilter = FreeCRT::TypeTraits::Move(InFilter);
	Parms.OnResults = OnResults;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.ApiGetMyMods
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TDelegate<void(const TArray<struct FCFCoreMod>& mods)>on_results                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FCFCoreError& Error)>&on_error                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::ApiGetMyMods(TDelegate<void(const TArray<struct FCFCoreMod>& mods)> on_results, const TDelegate<void(const struct FCFCoreError& Error)>& on_error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "ApiGetMyMods");

	Params::CFCoreSubsystem_ApiGetMyMods Parms{};

	Parms.on_results = on_results;
	Parms.on_error = on_error;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.ApiGetMyRatings
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FMyRatings& ratings)>on_results                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FCFCoreError& Error)>&on_error                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::ApiGetMyRatings(TDelegate<void(const struct FMyRatings& ratings)> on_results, const TDelegate<void(const struct FCFCoreError& Error)>& on_error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "ApiGetMyRatings");

	Params::CFCoreSubsystem_ApiGetMyRatings Parms{};

	Parms.on_results = on_results;
	Parms.on_error = on_error;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.ApiGetReportingReasons
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TDelegate<void(const TArray<struct FReportingReason>& reasons)>on_results                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FCFCoreError& Error)>&on_error                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::ApiGetReportingReasons(TDelegate<void(const TArray<struct FReportingReason>& reasons)> on_results, const TDelegate<void(const struct FCFCoreError& Error)>& on_error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "ApiGetReportingReasons");

	Params::CFCoreSubsystem_ApiGetReportingReasons Parms{};

	Parms.on_results = on_results;
	Parms.on_error = on_error;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.ApiGetVersions
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TDelegate<void(const TArray<struct FGameVersionsByType>& versions)>on_results                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FCFCoreError& Error)>&on_error                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::ApiGetVersions(TDelegate<void(const TArray<struct FGameVersionsByType>& versions)> on_results, const TDelegate<void(const struct FCFCoreError& Error)>& on_error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "ApiGetVersions");

	Params::CFCoreSubsystem_ApiGetVersions Parms{};

	Parms.on_results = on_results;
	Parms.on_error = on_error;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.ApiGetVersionTypes
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TDelegate<void(const TArray<struct FGameVersionType>& version_types)>on_results                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FCFCoreError& Error)>&on_error                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::ApiGetVersionTypes(TDelegate<void(const TArray<struct FGameVersionType>& version_types)> on_results, const TDelegate<void(const struct FCFCoreError& Error)>& on_error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "ApiGetVersionTypes");

	Params::CFCoreSubsystem_ApiGetVersionTypes Parms{};

	Parms.on_results = on_results;
	Parms.on_error = on_error;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.ApiInitiatePurchase
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FInitiatePurchaseRequest&  Request                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FPurchaseDetails& purchase_details, const class FString& token)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FCFCoreError& Error)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::ApiInitiatePurchase(const struct FInitiatePurchaseRequest& Request, const TDelegate<void(const struct FPurchaseDetails& purchase_details, const class FString& token)>& OnSuccess, const TDelegate<void(const struct FCFCoreError& Error)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "ApiInitiatePurchase");

	Params::CFCoreSubsystem_ApiInitiatePurchase Parms{};

	Parms.Request = FreeCRT::TypeTraits::Move(Request);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.ApiMatchPlatformFiles
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FMatchPlatformFilesFilter& Filter                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const TArray<struct FFile>& files)>OnResults                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FCFCoreError& Error)>OnError                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::ApiMatchPlatformFiles(const struct FMatchPlatformFilesFilter& Filter, TDelegate<void(const TArray<struct FFile>& files)> OnResults, TDelegate<void(const struct FCFCoreError& Error)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "ApiMatchPlatformFiles");

	Params::CFCoreSubsystem_ApiMatchPlatformFiles Parms{};

	Parms.Filter = FreeCRT::TypeTraits::Move(Filter);
	Parms.OnResults = OnResults;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.ApiRemoveRating
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int64                                   modId                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       on_success                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FCFCoreError& Error)>&on_error                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::ApiRemoveRating(int64 modId, TDelegate<void()> on_success, const TDelegate<void(const struct FCFCoreError& Error)>& on_error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "ApiRemoveRating");

	Params::CFCoreSubsystem_ApiRemoveRating Parms{};

	Parms.modId = modId;
	Parms.on_success = on_success;
	Parms.on_error = on_error;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.ApiReportMod
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int64                                   modId                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   reasonId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    report                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       on_reasons                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FCFCoreError& Error)>&on_error                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::ApiReportMod(int64 modId, int64 reasonId, const class FString& report, TDelegate<void()> on_reasons, const TDelegate<void(const struct FCFCoreError& Error)>& on_error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "ApiReportMod");

	Params::CFCoreSubsystem_ApiReportMod Parms{};

	Parms.modId = modId;
	Parms.reasonId = reasonId;
	Parms.report = FreeCRT::TypeTraits::Move(report);
	Parms.on_reasons = on_reasons;
	Parms.on_error = on_error;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.ApiSearchMods
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FCFCoreSearchModsFilter&   Filter                                                 (Parm, NativeAccessSpecifierPublic)
// const struct FCFCoreApiRequestPagination&pagination                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(const TArray<struct FCFCoreMod>& mods, const struct FCFCoreApiResponsePagination& pagination)>on_results                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FCFCoreError& Error)>&on_error                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::ApiSearchMods(const struct FCFCoreSearchModsFilter& Filter, const struct FCFCoreApiRequestPagination& pagination, TDelegate<void(const TArray<struct FCFCoreMod>& mods, const struct FCFCoreApiResponsePagination& pagination)> on_results, const TDelegate<void(const struct FCFCoreError& Error)>& on_error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "ApiSearchMods");

	Params::CFCoreSubsystem_ApiSearchMods Parms{};

	Parms.Filter = FreeCRT::TypeTraits::Move(Filter);
	Parms.pagination = FreeCRT::TypeTraits::Move(pagination);
	Parms.on_results = on_results;
	Parms.on_error = on_error;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.ApiUnblockMods
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FUnblockModsRequest&       Request                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(bool Success)>           OnResult                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FCFCoreError& Error)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::ApiUnblockMods(const struct FUnblockModsRequest& Request, TDelegate<void(bool Success)> OnResult, const TDelegate<void(const struct FCFCoreError& Error)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "ApiUnblockMods");

	Params::CFCoreSubsystem_ApiUnblockMods Parms{};

	Parms.Request = FreeCRT::TypeTraits::Move(Request);
	Parms.OnResult = OnResult;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.ApiUpdateRating
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int64                                   modId                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECFCoreRatingVoteDirection              Direction                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       on_success                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FCFCoreError& Error)>&on_error                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::ApiUpdateRating(int64 modId, ECFCoreRatingVoteDirection Direction, TDelegate<void()> on_success, const TDelegate<void(const struct FCFCoreError& Error)>& on_error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "ApiUpdateRating");

	Params::CFCoreSubsystem_ApiUpdateRating Parms{};

	Parms.modId = modId;
	Parms.Direction = Direction;
	Parms.on_success = on_success;
	Parms.on_error = on_error;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.AssureClientModsUpdated
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<int64>&                    ServerFileIds                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FModsUpdateProgress& UpdateProgress, const struct FLibraryProgress& ModInstallProgress, const struct FCFCoreMod& mod)>&OnProgress                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const TArray<struct FInstalledMod>& installed_mods)>&OnUpdated                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FCFCoreError& Error)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::AssureClientModsUpdated(const TArray<int64>& ServerFileIds, const TDelegate<void(const struct FModsUpdateProgress& UpdateProgress, const struct FLibraryProgress& ModInstallProgress, const struct FCFCoreMod& mod)>& OnProgress, const TDelegate<void(const TArray<struct FInstalledMod>& installed_mods)>& OnUpdated, const TDelegate<void(const struct FCFCoreError& Error)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "AssureClientModsUpdated");

	Params::CFCoreSubsystem_AssureClientModsUpdated Parms{};

	Parms.ServerFileIds = FreeCRT::TypeTraits::Move(ServerFileIds);
	Parms.OnProgress = OnProgress;
	Parms.OnUpdated = OnUpdated;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.AssureServerModsUpdated
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAssureServerModsUpdatedParams&Params_0                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FModsUpdateProgress& UpdateProgress, const struct FLibraryProgress& ModInstallProgress, const struct FCFCoreMod& mod)>&OnProgress                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const TArray<struct FInstalledMod>& installed_mods)>&OnUpdated                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FCFCoreError& Error)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::AssureServerModsUpdated(const struct FAssureServerModsUpdatedParams& Params_0, const TDelegate<void(const struct FModsUpdateProgress& UpdateProgress, const struct FLibraryProgress& ModInstallProgress, const struct FCFCoreMod& mod)>& OnProgress, const TDelegate<void(const TArray<struct FInstalledMod>& installed_mods)>& OnUpdated, const TDelegate<void(const struct FCFCoreError& Error)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "AssureServerModsUpdated");

	Params::CFCoreSubsystem_AssureServerModsUpdated Parms{};

	Parms.Params_0 = FreeCRT::TypeTraits::Move(Params_0);
	Parms.OnProgress = OnProgress;
	Parms.OnUpdated = OnUpdated;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.BeginPremiumModPurchase
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// const TArray<int64>&                    modIds                                                 (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::BeginPremiumModPurchase(const TArray<int64>& modIds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "BeginPremiumModPurchase");

	Params::CFCoreSubsystem_BeginPremiumModPurchase Parms{};

	Parms.modIds = FreeCRT::TypeTraits::Move(modIds);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.CancelInstallation
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// int64                                   mod_id                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       on_success                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FCFCoreError& Error)>on_error                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::CancelInstallation(int64 mod_id, TDelegate<void()> on_success, TDelegate<void(const struct FCFCoreError& Error)> on_error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "CancelInstallation");

	Params::CFCoreSubsystem_CancelInstallation Parms{};

	Parms.mod_id = mod_id;
	Parms.on_success = on_success;
	Parms.on_error = on_error;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.CreateCookedModFile
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int64                                   modId                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   SourceFileId                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FCreateCookedModFileRequest&CreateCookedModFileRequest                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    LocalFilenameToUpload                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(int64 mod_file_request_id)>&OnCreateModFileRequestId                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FFileTransferProgress& progress)>&OnProgress                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FUploadedModFile& uploaded_file)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FCFCoreError& Error)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::CreateCookedModFile(int64 modId, int64 SourceFileId, const struct FCreateCookedModFileRequest& CreateCookedModFileRequest, const class FString& LocalFilenameToUpload, const TDelegate<void(int64 mod_file_request_id)>& OnCreateModFileRequestId, const TDelegate<void(const struct FFileTransferProgress& progress)>& OnProgress, const TDelegate<void(const struct FUploadedModFile& uploaded_file)>& OnSuccess, const TDelegate<void(const struct FCFCoreError& Error)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "CreateCookedModFile");

	Params::CFCoreSubsystem_CreateCookedModFile Parms{};

	Parms.modId = modId;
	Parms.SourceFileId = SourceFileId;
	Parms.CreateCookedModFileRequest = FreeCRT::TypeTraits::Move(CreateCookedModFileRequest);
	Parms.LocalFilenameToUpload = FreeCRT::TypeTraits::Move(LocalFilenameToUpload);
	Parms.OnCreateModFileRequestId = OnCreateModFileRequestId;
	Parms.OnProgress = OnProgress;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.CreateMod
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FCreateModRequest&         create_mod_request                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    avatar_image_filename                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FCFCoreMod& mod)>on_success                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FCFCoreError& Error)>on_error                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::CreateMod(const struct FCreateModRequest& create_mod_request, const class FString& avatar_image_filename, TDelegate<void(const struct FCFCoreMod& mod)> on_success, TDelegate<void(const struct FCFCoreError& Error)> on_error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "CreateMod");

	Params::CFCoreSubsystem_CreateMod Parms{};

	Parms.create_mod_request = FreeCRT::TypeTraits::Move(create_mod_request);
	Parms.avatar_image_filename = FreeCRT::TypeTraits::Move(avatar_image_filename);
	Parms.on_success = on_success;
	Parms.on_error = on_error;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.CreateModFile
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int64                                   modId                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FCreateModFileRequest&     CreateModFileRequest                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    LocalFilenameToUpload                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(int64 mod_file_request_id)>&OnCreateModFileRequestId                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FFileTransferProgress& progress)>&OnProgress                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FUploadedModFile& uploaded_file)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FCFCoreError& Error)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::CreateModFile(int64 modId, const struct FCreateModFileRequest& CreateModFileRequest, const class FString& LocalFilenameToUpload, const TDelegate<void(int64 mod_file_request_id)>& OnCreateModFileRequestId, const TDelegate<void(const struct FFileTransferProgress& progress)>& OnProgress, const TDelegate<void(const struct FUploadedModFile& uploaded_file)>& OnSuccess, const TDelegate<void(const struct FCFCoreError& Error)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "CreateModFile");

	Params::CFCoreSubsystem_CreateModFile Parms{};

	Parms.modId = modId;
	Parms.CreateModFileRequest = FreeCRT::TypeTraits::Move(CreateModFileRequest);
	Parms.LocalFilenameToUpload = FreeCRT::TypeTraits::Move(LocalFilenameToUpload);
	Parms.OnCreateModFileRequestId = OnCreateModFileRequestId;
	Parms.OnProgress = OnProgress;
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.GenerateAuthToken
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    email                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   security_code                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       on_success                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FCFCoreError& Error)>on_error                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::GenerateAuthToken(const class FString& email, int32 security_code, TDelegate<void()> on_success, TDelegate<void(const struct FCFCoreError& Error)> on_error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "GenerateAuthToken");

	Params::CFCoreSubsystem_GenerateAuthToken Parms{};

	Parms.email = FreeCRT::TypeTraits::Move(email);
	Parms.security_code = security_code;
	Parms.on_success = on_success;
	Parms.on_error = on_error;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.GenerateAuthTokenByExternalProvider
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// ECFCoreExternalAuthProvider             provider                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    external_token                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FExternalAuthAdditionalInfo&additional_info                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void()>                       on_success                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FCFCoreError& Error)>on_error                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::GenerateAuthTokenByExternalProvider(ECFCoreExternalAuthProvider provider, const class FString& external_token, const struct FExternalAuthAdditionalInfo& additional_info, TDelegate<void()> on_success, TDelegate<void(const struct FCFCoreError& Error)> on_error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "GenerateAuthTokenByExternalProvider");

	Params::CFCoreSubsystem_GenerateAuthTokenByExternalProvider Parms{};

	Parms.provider = provider;
	Parms.external_token = FreeCRT::TypeTraits::Move(external_token);
	Parms.additional_info = FreeCRT::TypeTraits::Move(additional_info);
	Parms.on_success = on_success;
	Parms.on_error = on_error;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.GetAuthTerms
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FTerms& Terms)>on_success                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FCFCoreError& Error)>on_error                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::GetAuthTerms(TDelegate<void(const struct FTerms& Terms)> on_success, TDelegate<void(const struct FCFCoreError& Error)> on_error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "GetAuthTerms");

	Params::CFCoreSubsystem_GetAuthTerms Parms{};

	Parms.on_success = on_success;
	Parms.on_error = on_error;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.GetInstalledMods
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TDelegate<void(const TArray<struct FInstalledMod>& installed_mods)>on_installed_mods                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FCFCoreError& Error)>&on_error                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::GetInstalledMods(TDelegate<void(const TArray<struct FInstalledMod>& installed_mods)> on_installed_mods, const TDelegate<void(const struct FCFCoreError& Error)>& on_error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "GetInstalledMods");

	Params::CFCoreSubsystem_GetInstalledMods Parms{};

	Parms.on_installed_mods = on_installed_mods;
	Parms.on_error = on_error;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.GetModsDirInfo
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FModsDirInfo& ModsDirInfo)>OnModsDirInfo                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FCFCoreError& Error)>OnError                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::GetModsDirInfo(TDelegate<void(const struct FModsDirInfo& ModsDirInfo)> OnModsDirInfo, TDelegate<void(const struct FCFCoreError& Error)> OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "GetModsDirInfo");

	Params::CFCoreSubsystem_GetModsDirInfo Parms{};

	Parms.OnModsDirInfo = OnModsDirInfo;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.GetMyPremiumMods
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(const TArray<int64>& modIds)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FCFCoreError& Error)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::GetMyPremiumMods(const TDelegate<void(const TArray<int64>& modIds)>& OnSuccess, const TDelegate<void(const struct FCFCoreError& Error)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "GetMyPremiumMods");

	Params::CFCoreSubsystem_GetMyPremiumMods Parms{};

	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.Initialize
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FCFCoreSettings&           Settings                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnInitialized                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FCFCoreError& Error)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::Initialize(const struct FCFCoreSettings& Settings, const TDelegate<void()>& OnInitialized, const TDelegate<void(const struct FCFCoreError& Error)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "Initialize");

	Params::CFCoreSubsystem_Initialize Parms{};

	Parms.Settings = FreeCRT::TypeTraits::Move(Settings);
	Parms.OnInitialized = OnInitialized;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.InstallMod
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FCFCoreMod&                mod                                                    (Parm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FLibraryProgress& progress)>&on_progress                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FInstalledMod& installed_mod)>&on_installed                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FCFCoreError& Error)>&on_error                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::InstallMod(const struct FCFCoreMod& mod, const TDelegate<void(const struct FLibraryProgress& progress)>& on_progress, const TDelegate<void(const struct FInstalledMod& installed_mod)>& on_installed, const TDelegate<void(const struct FCFCoreError& Error)>& on_error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "InstallMod");

	Params::CFCoreSubsystem_InstallMod Parms{};

	Parms.mod = FreeCRT::TypeTraits::Move(mod);
	Parms.on_progress = on_progress;
	Parms.on_installed = on_installed;
	Parms.on_error = on_error;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.InstallModExtended
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FCFCoreMod&                InMod                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FFile&                     InFile                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FInstallModAdditionalParams&InAdditionalParams                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FLibraryProgress& progress)>&OnProgress                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FInstalledMod& installed_mod)>&OnInstalled                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FCFCoreError& Error)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::InstallModExtended(const struct FCFCoreMod& InMod, const struct FFile& InFile, const struct FInstallModAdditionalParams& InAdditionalParams, const TDelegate<void(const struct FLibraryProgress& progress)>& OnProgress, const TDelegate<void(const struct FInstalledMod& installed_mod)>& OnInstalled, const TDelegate<void(const struct FCFCoreError& Error)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "InstallModExtended");

	Params::CFCoreSubsystem_InstallModExtended Parms{};

	Parms.InMod = FreeCRT::TypeTraits::Move(InMod);
	Parms.InFile = FreeCRT::TypeTraits::Move(InFile);
	Parms.InAdditionalParams = FreeCRT::TypeTraits::Move(InAdditionalParams);
	Parms.OnProgress = OnProgress;
	Parms.OnInstalled = OnInstalled;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.IsAuthenticated
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(bool is_authenticated)>  on_is_auth                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::IsAuthenticated(TDelegate<void(bool is_authenticated)> on_is_auth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "IsAuthenticated");

	Params::CFCoreSubsystem_IsAuthenticated Parms{};

	Parms.on_is_auth = on_is_auth;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.Logout
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void()>                       on_success                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FCFCoreError& Error)>on_error                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::Logout(TDelegate<void()> on_success, TDelegate<void(const struct FCFCoreError& Error)> on_error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "Logout");

	Params::CFCoreSubsystem_Logout Parms{};

	Parms.on_success = on_success;
	Parms.on_error = on_error;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.OnSuccessGeneratePremium
// (Final, RequiredAPI, Native, Public)
// Parameters:
// const class FString&                    URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::OnSuccessGeneratePremium(const class FString& URL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "OnSuccessGeneratePremium");

	Params::CFCoreSubsystem_OnSuccessGeneratePremium Parms{};

	Parms.URL = FreeCRT::TypeTraits::Move(URL);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.OverridePublicKey
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    InPublicKeyPem                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FCFCoreError& Error)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::OverridePublicKey(const class FString& InPublicKeyPem, const TDelegate<void()>& OnSuccess, const TDelegate<void(const struct FCFCoreError& Error)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "OverridePublicKey");

	Params::CFCoreSubsystem_OverridePublicKey Parms{};

	Parms.InPublicKeyPem = FreeCRT::TypeTraits::Move(InPublicKeyPem);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.PerformModsValidation
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FInstalledMod>&     installed_mods                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const TArray<struct FInstalledMod>& invalid_installed_mods)>on_success                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FCFCoreError& Error)>on_error                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::PerformModsValidation(const TArray<struct FInstalledMod>& installed_mods, TDelegate<void(const TArray<struct FInstalledMod>& invalid_installed_mods)> on_success, TDelegate<void(const struct FCFCoreError& Error)> on_error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "PerformModsValidation");

	Params::CFCoreSubsystem_PerformModsValidation Parms{};

	Parms.installed_mods = FreeCRT::TypeTraits::Move(installed_mods);
	Parms.on_success = on_success;
	Parms.on_error = on_error;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.PremiumModsCheck
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<int64>&                    InModIds                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(const TArray<int64>& modIds)>&OnSuccess                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FCFCoreError& Error)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::PremiumModsCheck(const TArray<int64>& InModIds, const TDelegate<void(const TArray<int64>& modIds)>& OnSuccess, const TDelegate<void(const struct FCFCoreError& Error)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "PremiumModsCheck");

	Params::CFCoreSubsystem_PremiumModsCheck Parms{};

	Parms.InModIds = FreeCRT::TypeTraits::Move(InModIds);
	Parms.OnSuccess = OnSuccess;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.SendSecurityCode
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    email                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       on_success                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FCFCoreError& Error)>on_error                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::SendSecurityCode(const class FString& email, TDelegate<void()> on_success, TDelegate<void(const struct FCFCoreError& Error)> on_error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "SendSecurityCode");

	Params::CFCoreSubsystem_SendSecurityCode Parms{};

	Parms.email = FreeCRT::TypeTraits::Move(email);
	Parms.on_success = on_success;
	Parms.on_error = on_error;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.SynchronizeWithServer
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TDelegate<void()>                       on_success                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FCFCoreError& Error)>&on_error                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::SynchronizeWithServer(TDelegate<void()> on_success, const TDelegate<void(const struct FCFCoreError& Error)>& on_error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "SynchronizeWithServer");

	Params::CFCoreSubsystem_SynchronizeWithServer Parms{};

	Parms.on_success = on_success;
	Parms.on_error = on_error;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.UninstallMod
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// int64                                   mod_id                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FInstalledMod& uninstalled_mod)>on_uninstalled                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FCFCoreError& Error)>on_error                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::UninstallMod(int64 mod_id, TDelegate<void(const struct FInstalledMod& uninstalled_mod)> on_uninstalled, TDelegate<void(const struct FCFCoreError& Error)> on_error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "UninstallMod");

	Params::CFCoreSubsystem_UninstallMod Parms{};

	Parms.mod_id = mod_id;
	Parms.on_uninstalled = on_uninstalled;
	Parms.on_error = on_error;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.Unitialize
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void()>&                OnUninitialized                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FCFCoreError& Error)>&OnError                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::Unitialize(const TDelegate<void()>& OnUninitialized, const TDelegate<void(const struct FCFCoreError& Error)>& OnError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "Unitialize");

	Params::CFCoreSubsystem_Unitialize Parms{};

	Parms.OnUninitialized = OnUninitialized;
	Parms.OnError = OnError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function cfcore.CFCoreSubsystem.UpdateMod
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int64                                   mod_id                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FUpdateModRequest&         update_mod_request                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    avatar_image_filename                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FCFCoreMod& mod)>on_success                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FCFCoreError& Error)>on_error                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCFCoreSubsystem::UpdateMod(int64 mod_id, const struct FUpdateModRequest& update_mod_request, const class FString& avatar_image_filename, TDelegate<void(const struct FCFCoreMod& mod)> on_success, TDelegate<void(const struct FCFCoreError& Error)> on_error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CFCoreSubsystem", "UpdateMod");

	Params::CFCoreSubsystem_UpdateMod Parms{};

	Parms.mod_id = mod_id;
	Parms.update_mod_request = FreeCRT::TypeTraits::Move(update_mod_request);
	Parms.avatar_image_filename = FreeCRT::TypeTraits::Move(avatar_image_filename);
	Parms.on_success = on_success;
	Parms.on_error = on_error;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

