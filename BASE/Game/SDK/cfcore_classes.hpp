#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: cfcore

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "cfcore_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class cfcore.CFCoreBPLibrary
// 0x0000 (0x0028 - 0x0028)
class UCFCoreBPLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FCFCoreFileSize BreakFileSize(int64 Bytes);
	static int64 ExtractIdFromExtraData(const class FString& InExtraData, const class FString& InFieldName);
	static class FString FormatFileSize(int64 Bytes);
	static struct FCFCoreApiRequestPagination MakeApiRequestPagination(int32 Index_0, int32 page_size);
	static struct FAssureServerModsUpdatedParams MakeAssureServerModsUpdatedParams(const TArray<int64>& modIds, const TArray<int64>& devModIds);
	static struct FCreateModFileRequest MakeCreateModFileRequest(ECFCoreChangelogMarkupType changelog_type, const class FString& changelog, const class FString& Filename, const class FString& DisplayName, const TArray<int64>& gameVersionIds, ECFCoreFileReleaseType releaseType, const struct FModFileCookingOptions& cookingOptions);
	static struct FCreateModRequest MakeCreateModRequest(int64 class_id, const class FString& Name_0, const class FString& summary, ECFCoreMakrupType description_type, const class FString& Description, int64 primary_category_id, const TArray<int64>& game_category_ids, bool is_experimental);
	static struct FExternalAuthAdditionalInfo MakeExternalAuthAdditionalInfo(const struct FDateTime& eulaAcceptTime);
	static struct FCFCoreGetCategoriesFilter MakeGetCategoriesFilter(int32 class_id);
	static struct FCFCoreSettings MakeSettings(const class FString& default_language, int64 game_id, const class FString& api_key, const class FString& mods_directory, const class FString& user_data_directory, int32 max_concurrent_installations);
	static struct FCFCoreSettings MakeSettingsFromProjectConfig();
	static struct FUpdateModRequest MakeUpdateModRequest(int64 class_id, const class FString& Name_0, const class FString& summary, ECFCoreMakrupType description_type, const class FString& Description, int64 primary_category_id, const TArray<int64>& game_category_ids, bool is_experimental);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CFCoreBPLibrary">();
	}
	static class UCFCoreBPLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCFCoreBPLibrary>();
	}
};

// Class cfcore.CFCoreEditorSettings
// 0x00D8 (0x0100 - 0x0028)
class UCFCoreEditorSettings final : public UObject
{
public:
	class FString                                 defaultLanguage;                                   // 0x0028(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         gameId;                                            // 0x0038(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 apiKey;                                            // 0x0040(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         maxConcurrentInstallations;                        // 0x0050(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 modsDirectory;                                     // 0x0058(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EModsDirectoryMode                            modsDirectoryMode;                                 // 0x0068(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 userDataDirectory;                                 // 0x0070(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsServer;                                          // 0x0080(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isServerPcOnly;                                    // 0x0081(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCFCoreSettingsThrottling              throttling;                                        // 0x0088(0x0008)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FCFCoreSettingsPremiumMods             premiumMods;                                       // 0x0090(0x0010)(Edit, Config, NativeAccessSpecifierPublic)
	struct FCFCoreSettingsLogger                  logger;                                            // 0x00A0(0x000C)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<int64>                                   dynamicContentCategoryIds;                         // 0x00B0(0x0050)(Edit, Config, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CFCoreEditorSettings">();
	}
	static class UCFCoreEditorSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCFCoreEditorSettings>();
	}
};

// Class cfcore.CFCoreSubsystem
// 0x0040 (0x0070 - 0x0030)
class UCFCoreSubsystem final : public UEngineSubsystem
{
public:
	TMulticastInlineDelegate<void(bool bAuth)>    OnAuthenticatedEvent;                              // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TDelegate<void(bool* bHandled, const struct FGenPremiumCheckoutUrlRequest& Request)> OnGeneratePremiumCheckoutUrl; // 0x0040(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bSuccess)> OnPurchaseFinalizedEvent;                          // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FInstalledMod& UninstalledMod)> OnModUninstalledEvent; // 0x0060(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)

public:
	void AnalyticsSendGamePlaySession(const struct FGamePlaySessionParams& InParams, const TDelegate<void()>& OnSuccess, const TDelegate<void(const struct FCFCoreError& Error)>& OnError);
	void AnalyticsSendModBrowsingFunnelAction(const struct FModBrowsingFunnelParams& InParams, const TDelegate<void()>& OnSuccess, const TDelegate<void(const struct FCFCoreError& Error)>& OnError);
	void AnalyticsSendModBrowsingFunnelImpression(const struct FModBrowsingFunnelParams& InParams, const TDelegate<void()>& OnSuccess, const TDelegate<void(const struct FCFCoreError& Error)>& OnError);
	void ApiEntitlementsRedeemCode(const struct FEntitlementsRedeemCodeRequest& InRequest, const TDelegate<void(const struct FEntitlementCampaign& EntitlementCampaign)>& OnSuccess, const TDelegate<void(const struct FCFCoreError& Error)>& OnError);
	void ApiFinalizePurchase(const struct FFinalizePurchaseRequest& Request, const TDelegate<void()>& OnSuccess, const TDelegate<void(const struct FCFCoreError& Error)>& OnError);
	void ApiGeneratePremiumCheckoutUrl(const struct FGenPremiumCheckoutUrlRequest& Request, const TDelegate<void(const class FString& URL)>& OnSuccess, const TDelegate<void(const struct FCFCoreError& Error)>& OnError);
	void ApiGenerateTempToken(TDelegate<void(const class FString& temp_user_token)> on_result, const TDelegate<void(const struct FCFCoreError& Error)>& on_error);
	void ApiGetActiveCookingVersion(const TDelegate<void(const int32& Version)>& OnVersion, const TDelegate<void(const struct FCFCoreError& Error)>& OnError);
	void ApiGetBlockedModsDetails(TDelegate<void(const struct FBlockedDetails& blocked_details)> on_result, const TDelegate<void(const struct FCFCoreError& Error)>& on_error);
	void ApiGetCategories(const struct FCFCoreGetCategoriesFilter& Filter, TDelegate<void(const TArray<struct FCategory>& Categories)> on_results, const TDelegate<void(const struct FCFCoreError& Error)>& on_error);
	void ApiGetFiles(const TArray<int64>& fileIds, TDelegate<void(const TArray<struct FFile>& files)> OnResults, TDelegate<void(const struct FCFCoreError& Error)> OnError);
	void ApiGetGame(TDelegate<void(const struct FGame& Game)> on_game, const TDelegate<void(const struct FCFCoreError& Error)>& on_error);
	void ApiGetMe(TDelegate<void(const struct FMe& Me)> on_results, const TDelegate<void(const struct FCFCoreError& Error)>& on_error);
	void ApiGetMod(int64 modId, TDelegate<void(const struct FCFCoreMod& mod)> on_mod, const TDelegate<void(const struct FCFCoreError& Error)>& on_error);
	void ApiGetModDescription(int64 modId, TDelegate<void(const class FString& Description)> on_mod_desc, const TDelegate<void(const struct FCFCoreError& Error)>& on_error);
	void ApiGetMods(const TArray<int64>& modIds, TDelegate<void(const TArray<struct FCFCoreMod>& mods)> on_results, const TDelegate<void(const struct FCFCoreError& Error)>& on_error);
	void ApiGetModsHighlights(const struct FCFCoreGetModsHighlightsFilter& InFilter, TDelegate<void(const struct FModsHighlights& mods)> OnResults, const TDelegate<void(const struct FCFCoreError& Error)>& OnError);
	void ApiGetModsHighlightsV2(const struct FCFCoreGetModsHighlightsFilter& InFilter, TDelegate<void(const struct FModsHighlightsV2& mods)> OnResults, const TDelegate<void(const struct FCFCoreError& Error)>& OnError);
	void ApiGetMyMods(TDelegate<void(const TArray<struct FCFCoreMod>& mods)> on_results, const TDelegate<void(const struct FCFCoreError& Error)>& on_error);
	void ApiGetMyRatings(TDelegate<void(const struct FMyRatings& ratings)> on_results, const TDelegate<void(const struct FCFCoreError& Error)>& on_error);
	void ApiGetReportingReasons(TDelegate<void(const TArray<struct FReportingReason>& reasons)> on_results, const TDelegate<void(const struct FCFCoreError& Error)>& on_error);
	void ApiGetVersions(TDelegate<void(const TArray<struct FGameVersionsByType>& versions)> on_results, const TDelegate<void(const struct FCFCoreError& Error)>& on_error);
	void ApiGetVersionTypes(TDelegate<void(const TArray<struct FGameVersionType>& version_types)> on_results, const TDelegate<void(const struct FCFCoreError& Error)>& on_error);
	void ApiInitiatePurchase(const struct FInitiatePurchaseRequest& Request, const TDelegate<void(const struct FPurchaseDetails& purchase_details, const class FString& token)>& OnSuccess, const TDelegate<void(const struct FCFCoreError& Error)>& OnError);
	void ApiMatchPlatformFiles(const struct FMatchPlatformFilesFilter& Filter, TDelegate<void(const TArray<struct FFile>& files)> OnResults, TDelegate<void(const struct FCFCoreError& Error)> OnError);
	void ApiRemoveRating(int64 modId, TDelegate<void()> on_success, const TDelegate<void(const struct FCFCoreError& Error)>& on_error);
	void ApiReportMod(int64 modId, int64 reasonId, const class FString& report, TDelegate<void()> on_reasons, const TDelegate<void(const struct FCFCoreError& Error)>& on_error);
	void ApiSearchMods(const struct FCFCoreSearchModsFilter& Filter, const struct FCFCoreApiRequestPagination& pagination, TDelegate<void(const TArray<struct FCFCoreMod>& mods, const struct FCFCoreApiResponsePagination& pagination)> on_results, const TDelegate<void(const struct FCFCoreError& Error)>& on_error);
	void ApiUnblockMods(const struct FUnblockModsRequest& Request, TDelegate<void(bool Success)> OnResult, const TDelegate<void(const struct FCFCoreError& Error)>& OnError);
	void ApiUpdateRating(int64 modId, ECFCoreRatingVoteDirection Direction, TDelegate<void()> on_success, const TDelegate<void(const struct FCFCoreError& Error)>& on_error);
	void AssureClientModsUpdated(const TArray<int64>& ServerFileIds, const TDelegate<void(const struct FModsUpdateProgress& UpdateProgress, const struct FLibraryProgress& ModInstallProgress, const struct FCFCoreMod& mod)>& OnProgress, const TDelegate<void(const TArray<struct FInstalledMod>& installed_mods)>& OnUpdated, const TDelegate<void(const struct FCFCoreError& Error)>& OnError);
	void AssureServerModsUpdated(const struct FAssureServerModsUpdatedParams& Params_0, const TDelegate<void(const struct FModsUpdateProgress& UpdateProgress, const struct FLibraryProgress& ModInstallProgress, const struct FCFCoreMod& mod)>& OnProgress, const TDelegate<void(const TArray<struct FInstalledMod>& installed_mods)>& OnUpdated, const TDelegate<void(const struct FCFCoreError& Error)>& OnError);
	void BeginPremiumModPurchase(const TArray<int64>& modIds);
	void CancelInstallation(int64 mod_id, TDelegate<void()> on_success, TDelegate<void(const struct FCFCoreError& Error)> on_error);
	void CreateCookedModFile(int64 modId, int64 SourceFileId, const struct FCreateCookedModFileRequest& CreateCookedModFileRequest, const class FString& LocalFilenameToUpload, const TDelegate<void(int64 mod_file_request_id)>& OnCreateModFileRequestId, const TDelegate<void(const struct FFileTransferProgress& progress)>& OnProgress, const TDelegate<void(const struct FUploadedModFile& uploaded_file)>& OnSuccess, const TDelegate<void(const struct FCFCoreError& Error)>& OnError);
	void CreateMod(const struct FCreateModRequest& create_mod_request, const class FString& avatar_image_filename, TDelegate<void(const struct FCFCoreMod& mod)> on_success, TDelegate<void(const struct FCFCoreError& Error)> on_error);
	void CreateModFile(int64 modId, const struct FCreateModFileRequest& CreateModFileRequest, const class FString& LocalFilenameToUpload, const TDelegate<void(int64 mod_file_request_id)>& OnCreateModFileRequestId, const TDelegate<void(const struct FFileTransferProgress& progress)>& OnProgress, const TDelegate<void(const struct FUploadedModFile& uploaded_file)>& OnSuccess, const TDelegate<void(const struct FCFCoreError& Error)>& OnError);
	void GenerateAuthToken(const class FString& email, int32 security_code, TDelegate<void()> on_success, TDelegate<void(const struct FCFCoreError& Error)> on_error);
	void GenerateAuthTokenByExternalProvider(ECFCoreExternalAuthProvider provider, const class FString& external_token, const struct FExternalAuthAdditionalInfo& additional_info, TDelegate<void()> on_success, TDelegate<void(const struct FCFCoreError& Error)> on_error);
	void GetAuthTerms(TDelegate<void(const struct FTerms& Terms)> on_success, TDelegate<void(const struct FCFCoreError& Error)> on_error);
	void GetInstalledMods(TDelegate<void(const TArray<struct FInstalledMod>& installed_mods)> on_installed_mods, const TDelegate<void(const struct FCFCoreError& Error)>& on_error);
	void GetModsDirInfo(TDelegate<void(const struct FModsDirInfo& ModsDirInfo)> OnModsDirInfo, TDelegate<void(const struct FCFCoreError& Error)> OnError);
	void GetMyPremiumMods(const TDelegate<void(const TArray<int64>& modIds)>& OnSuccess, const TDelegate<void(const struct FCFCoreError& Error)>& OnError);
	void Initialize(const struct FCFCoreSettings& Settings, const TDelegate<void()>& OnInitialized, const TDelegate<void(const struct FCFCoreError& Error)>& OnError);
	void InstallMod(const struct FCFCoreMod& mod, const TDelegate<void(const struct FLibraryProgress& progress)>& on_progress, const TDelegate<void(const struct FInstalledMod& installed_mod)>& on_installed, const TDelegate<void(const struct FCFCoreError& Error)>& on_error);
	void InstallModExtended(const struct FCFCoreMod& InMod, const struct FFile& InFile, const struct FInstallModAdditionalParams& InAdditionalParams, const TDelegate<void(const struct FLibraryProgress& progress)>& OnProgress, const TDelegate<void(const struct FInstalledMod& installed_mod)>& OnInstalled, const TDelegate<void(const struct FCFCoreError& Error)>& OnError);
	void IsAuthenticated(TDelegate<void(bool is_authenticated)> on_is_auth);
	void Logout(TDelegate<void()> on_success, TDelegate<void(const struct FCFCoreError& Error)> on_error);
	void OnSuccessGeneratePremium(const class FString& URL);
	void OverridePublicKey(const class FString& InPublicKeyPem, const TDelegate<void()>& OnSuccess, const TDelegate<void(const struct FCFCoreError& Error)>& OnError);
	void PerformModsValidation(const TArray<struct FInstalledMod>& installed_mods, TDelegate<void(const TArray<struct FInstalledMod>& invalid_installed_mods)> on_success, TDelegate<void(const struct FCFCoreError& Error)> on_error);
	void PremiumModsCheck(const TArray<int64>& InModIds, const TDelegate<void(const TArray<int64>& modIds)>& OnSuccess, const TDelegate<void(const struct FCFCoreError& Error)>& OnError);
	void SendSecurityCode(const class FString& email, TDelegate<void()> on_success, TDelegate<void(const struct FCFCoreError& Error)> on_error);
	void SynchronizeWithServer(TDelegate<void()> on_success, const TDelegate<void(const struct FCFCoreError& Error)>& on_error);
	void UninstallMod(int64 mod_id, TDelegate<void(const struct FInstalledMod& uninstalled_mod)> on_uninstalled, TDelegate<void(const struct FCFCoreError& Error)> on_error);
	void Unitialize(const TDelegate<void()>& OnUninitialized, const TDelegate<void(const struct FCFCoreError& Error)>& OnError);
	void UpdateMod(int64 mod_id, const struct FUpdateModRequest& update_mod_request, const class FString& avatar_image_filename, TDelegate<void(const struct FCFCoreMod& mod)> on_success, TDelegate<void(const struct FCFCoreError& Error)> on_error);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CFCoreSubsystem">();
	}
	static class UCFCoreSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCFCoreSubsystem>();
	}
};

}

