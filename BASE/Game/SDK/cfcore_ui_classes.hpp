#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: cfcore_ui

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "cfcore_ui_structs.hpp"
#include "InputCore_structs.hpp"
#include "cfcore_structs.hpp"
#include "SlateCore_structs.hpp"
#include "DeveloperSettings_classes.hpp"
#include "UMG_classes.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class cfcore_ui.BindButtonSystem
// 0x0028 (0x0058 - 0x0030)
class UBindButtonSystem final : public UEngineSubsystem
{
public:
	TMulticastInlineDelegate<void(const struct FKey& Key, EViewState State)> ControllerButtonInViewState; // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x18];                                      // 0x0040(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ControllerAction(const struct FKey& Key);
	void EndBind();
	void SetViewState(EViewState NewState);
	void StartBind();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BindButtonSystem">();
	}
	static class UBindButtonSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBindButtonSystem>();
	}
};

// Class cfcore_ui.CFCoreRichTextBlockICodeBlockDecorator
// 0x0000 (0x0028 - 0x0028)
class UCFCoreRichTextBlockICodeBlockDecorator final : public URichTextBlockDecorator
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CFCoreRichTextBlockICodeBlockDecorator">();
	}
	static class UCFCoreRichTextBlockICodeBlockDecorator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCFCoreRichTextBlockICodeBlockDecorator>();
	}
};

// Class cfcore_ui.CFCoreButtonImage
// 0x01A0 (0x04F0 - 0x0350)
class UCFCoreButtonImage final : public UImage
{
public:
	bool                                          UseDefaultBrushOnPC;                               // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_349[0x7];                                      // 0x0349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            PlayStationButtonImage;                            // 0x0350(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            XboxButtonImage;                                   // 0x0420(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CFCoreButtonImage">();
	}
	static class UCFCoreButtonImage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCFCoreButtonImage>();
	}
};

// Class cfcore_ui.CFCoreRichTextBlockImageDecorator
// 0x0028 (0x0058 - 0x0030)
class UCFCoreRichTextBlockImageDecorator : public URichTextBlockImageDecorator
{
public:
	class UCFCoreRichText*                        CoreRichText;                                      // 0x0030(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(class UTexture2DDynamic* Texture, const class FString& URL)> OnSuccess; // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UTexture2DDynamic* Texture, const class FString& URL)> OnFail; // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void SetImageToMap(class UTexture2DDynamic* Image, const class FString& ImageUrl);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CFCoreRichTextBlockImageDecorator">();
	}
	static class UCFCoreRichTextBlockImageDecorator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCFCoreRichTextBlockImageDecorator>();
	}
};

// Class cfcore_ui.CFCoreGamepadCursorSettings
// 0x00C0 (0x00F8 - 0x0038)
class UCFCoreGamepadCursorSettings final : public UDeveloperSettings
{
public:
	struct FRuntimeFloatCurve                     AnalogCursorAccelerationCurve;                     // 0x0038(0x0088)(Edit, Config, NativeAccessSpecifierPrivate)
	float                                         MaxAnalogCursorSpeed;                              // 0x00C0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxAnalogCursorSpeedWhenHovered;                   // 0x00C4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AnalogCursorDragCoefficient;                       // 0x00C8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AnalogCursorDragCoefficientWhenHovered;            // 0x00CC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MinAnalogCursorSpeed;                              // 0x00D0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AnalogCursorDeadZone;                              // 0x00D4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AnalogCursorAccelerationMultiplier;                // 0x00D8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AnalogCursorSize;                                  // 0x00DC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bUseEngineAnalogCursor;                            // 0x00E0(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bAnalogCursorNoAcceleration;                       // 0x00E1(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E2[0x16];                                      // 0x00E2(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CFCoreGamepadCursorSettings">();
	}
	static class UCFCoreGamepadCursorSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCFCoreGamepadCursorSettings>();
	}
};

// Class cfcore_ui.CFCoreMathHelperFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UCFCoreMathHelperFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static int32 Int32_AddOne(int32 Value);
	static int32 Int32_SubOne(int32 Value);
	static int64 Int64_AddOne(int64 Value);
	static int64 Int64_SubOne(int64 Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CFCoreMathHelperFunctionLibrary">();
	}
	static class UCFCoreMathHelperFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCFCoreMathHelperFunctionLibrary>();
	}
};

// Class cfcore_ui.CFCoreRichText
// 0x0070 (0x0980 - 0x0910)
class UCFCoreRichText final : public URichTextBlock
{
public:
	TMap<class FString, class UTexture2DDynamic*> ImageMap;                                          // 0x0910(0x0050)(NativeAccessSpecifierPublic)
	uint8                                         Pad_960[0x20];                                     // 0x0960(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CFCoreRichText">();
	}
	static class UCFCoreRichText* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCFCoreRichText>();
	}
};

// Class cfcore_ui.CFCoreThemeSettings
// 0x0000 (0x0028 - 0x0028)
class UCFCoreThemeSettings final : public UBlueprintFunctionLibrary
{
public:
	static void CommitThemeData(class UDataTable* themeDataTable, const class FString& themeName, const struct FCFCoreThemeRowData& Data);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CFCoreThemeSettings">();
	}
	static class UCFCoreThemeSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCFCoreThemeSettings>();
	}
};

// Class cfcore_ui.CFCoreUIBaseModel
// 0x0000 (0x0000 - 0x0000)
class ICFCoreUIBaseModel final
{
public:
	bool OnEventReceived(const EGameModsEvent& evt, const TArray<struct FCFCoreMod>& InModsList, TArray<struct FInstallProgressMod>* OutModsList);
	bool OnEventReceived_Installed(const EGameModsEvent& evt, const TArray<struct FInstalledMod>& InModsList, TArray<struct FInstallProgressMod>* OutModsList);
	bool OnEventReceived_LibraryProgress(const EGameModsEvent& evt, const struct FLibraryProgress& progress, TArray<struct FInstallProgressMod>* OutModsList);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CFCoreUIBaseModel">();
	}
	static class ICFCoreUIBaseModel* GetDefaultObj()
	{
		return GetDefaultObjImpl<ICFCoreUIBaseModel>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};

// Class cfcore_ui.CFCoreUIBaseView
// 0x0000 (0x0000 - 0x0000)
class ICFCoreUIBaseView final
{
public:
	bool OnEventBroadcasted(EGameModsEvent evt, const TArray<struct FInstallProgressMod>& ModsList, const struct FCFCoreApiResponsePagination& pagination);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CFCoreUIBaseView">();
	}
	static class ICFCoreUIBaseView* GetDefaultObj()
	{
		return GetDefaultObjImpl<ICFCoreUIBaseView>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};

// Class cfcore_ui.CFCoreUIModel
// 0x0058 (0x0080 - 0x0028)
class UCFCoreUIModel : public UObject
{
public:
	uint8                                         Pad_28[0x58];                                      // 0x0028(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CFCoreUIModel">();
	}
	static class UCFCoreUIModel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCFCoreUIModel>();
	}
};

// Class cfcore_ui.CFCoreUISubsystem
// 0x01F0 (0x0220 - 0x0030)
class UCFCoreUISubsystem final : public UGameInstanceSubsystem
{
public:
	TDelegate<void(const int64& modId)>           UIPurchaseModDelegate;                             // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const TArray<int64>& ModsId)>  UIPurchaseModsDelegate;                            // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMyRatings                             UserRatings;                                       // 0x0050(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TDelegate<void()>                             ModsRatingsInit;                                   // 0x0070(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRatingsInitialized;                               // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(int64 modId, const class FText& PriceText, const class FText& DescriptionText, int64 NumericPrice, const class FString& productId)> GetPriceOfProductDelegate; // 0x0088(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x158];                                     // 0x0098(0x0158)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UObject*>                        Models;                                            // 0x01F0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_200[0x20];                                     // 0x0200(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FInstallProgressMod MakeFInstallProgressMod(const struct FCFCoreMod& mod);
	static struct FInstallProgressMod MakeFInstallProgressModFromID(int64 ID);
	static void SetMod(const struct FCFCoreMod& mod, const struct FInstalledMod& InInstalledMod, struct FInstalledMod* OutInstalledMod);

	void ApiGetModsById(const TArray<int64>& modIds);
	void CancelModInstallation(const struct FCFCoreMod& mod);
	void GetInstalledMods();
	bool GetModById(struct FInstallProgressMod* OutMod, const int64 ID);
	void GetMyMods();
	void GetPriceOfProduct(int64 modId, const class FString& productId);
	bool InitializeModView(class UObject* View, const struct FCFCoreMod& mod);
	void InitializeUIController();
	void InstallMod(const struct FCFCoreMod& mod);
	bool IsAnyModInstalling();
	void OnCancelModInstallation(const struct FCFCoreError& Error);
	void OnCancelModInstallationSuccess();
	void OnFinishedInstalling(const struct FInstalledMod& InstalledMod);
	void OnFinishedUpdating(const struct FInstalledMod& updatedMod);
	void OnGetInstalledMods(const TArray<struct FInstalledMod>& installedMods);
	void OnGetInstalledModsError(const struct FCFCoreError& Error);
	void OnGetModsByIds(const TArray<struct FCFCoreMod>& mods);
	void OnGetMyRatingsError(const struct FCFCoreError& Error);
	void OnInstallProgress(const struct FLibraryProgress& progress);
	void OnModInstallError(const struct FCFCoreError& Error, const struct FCFCoreMod& InstallingMod);
	void OnModUninstallError(const struct FCFCoreError& Error);
	void OnMyMods(const TArray<struct FCFCoreMod>& mods);
	void OnMyModsError(const struct FCFCoreError& Error);
	void OnRatingsReceived(const struct FMyRatings& ratings);
	void OnSearchMods(const TArray<struct FCFCoreMod>& mods, const struct FCFCoreApiResponsePagination& pagination);
	void OnSearchModsError(const struct FCFCoreError& Error);
	void OnUninstall(const struct FInstalledMod& InstalledMod);
	void OnUpdateModRating();
	void OnUpdateModRatingError(const struct FCFCoreError& Error);
	void PurchaseMod(int64 modId);
	void PurchaseMods(const TArray<int64>& ModsId);
	void RegisterErrorDelegate(const TDelegate<void(const struct FCFCoreError& Error)>& errorDelegate);
	bool RegisterModelClass(const TSubclassOf<class UObject> modelClass);
	void RegisterPurchaseModDelegate(const TDelegate<void(const int64& modId)>& PurchaseModDelegate);
	void RegisterPurchaseModsDelegate(const TDelegate<void(const TArray<int64>& ModsId)>& PurchaseModsDelegate);
	void ReleaseUIController();
	void SearchMods(const struct FCFCoreSearchModsFilter& Filter, const struct FCFCoreApiRequestPagination& pagination);
	bool SubscribeViewToEvent(class UObject* View, const EGameModsEvent& evt, bool initializeView);
	bool SubscribeViewToEvents(class UObject* View, const TArray<EGameModsEvent>& evts, bool initializeView);
	void UninstallMod(const struct FCFCoreMod& mod);
	bool UnregisterModelClass(const TSubclassOf<class UObject> modelClass);
	bool UnsubscribeViewFromEvent(class UObject* View, const EGameModsEvent& evt);
	void UnsubscribeViewFromEvents(class UObject* View, const TArray<EGameModsEvent>& evts);
	void UpdateAllModRatings(const TDelegate<void()>& ReceivedModsRatingsInit);
	void UpdateMod(const struct FCFCoreMod& mod);
	void UpdateModRating(int64 modId, ECFCoreRatingVoteDirection Vote);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CFCoreUISubsystem">();
	}
	static class UCFCoreUISubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCFCoreUISubsystem>();
	}
};

// Class cfcore_ui.CFCoreVirtualCursorFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UCFCoreVirtualCursorFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void DisableVirtualCursor(class APlayerController* PC);
	static void EnableVirtualCursor(class APlayerController* PC);
	static bool IsCursorOverInteractableWidget();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CFCoreVirtualCursorFunctionLibrary">();
	}
	static class UCFCoreVirtualCursorFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCFCoreVirtualCursorFunctionLibrary>();
	}
};

}

